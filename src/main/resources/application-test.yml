# Test Environment Configuration
#
# This configuration provides a test environment that mirrors development:
# - Read/Write datasource separation for realistic testing
# - AWS Secrets Manager integration for database credentials
# - Smaller connection pools optimized for test execution 
# - OAuth2 integration for authentication testing
# - Test-specific timeouts and settings

# Test Profile
spring:
  config:
    activate:
      on-profile: test
      
  # Database Configuration - Read/Write Separation (mirrors dev)
  # Uses AWS Secrets Manager MySQL driver for real database testing
  driver-class-name: com.amazonaws.secretsmanager.sql.AWSSecretsManagerMySQLDriver

  # JPA and Hibernate Configuration
  jpa:
    show-sql: false              # Set to true for SQL debugging in tests
    hibernate:
      ddl-auto: create-drop      # Recreate schema for each test run
    open-in-view: false          # Disable for tests to avoid lazy loading issues
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        # Simple batch optimization for tests
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        
  # Read/Write DataSource Configuration - Test Optimized
  datasource:
    # Write DataSource (Primary) - Smaller pools for test efficiency
    write:
      hikari:
        # Pool Sizing - smaller for test environment
        maximum-pool-size: 10       # Reduced for tests
        minimum-idle: 2             # Minimal idle connections
        
        # Connection Lifecycle Management - faster timeouts for tests
        idle-timeout: 120000        # 2 minutes - shorter for tests
        max-lifetime: 600000        # 10 minutes - shorter lifecycle
        keepalive-time: 60000       # 1 minute - more frequent keepalive

        # Performance Tuning for Tests - faster timeouts
        connection-timeout: 5000    # 5 seconds - faster failure detection
        validation-timeout: 2000    # 2 seconds - quick validation
        leak-detection-threshold: 30000 # 30 seconds - detect leaks faster
        
    # Read DataSource (Secondary) - Test optimized
    read:
      hikari:
        # Pool Sizing - moderate size for test reads
        maximum-pool-size: 15       # Smaller than dev but allows concurrency
        minimum-idle: 3             # Small idle pool
        
        # Connection Lifecycle Management - test optimized
        idle-timeout: 180000        # 3 minutes - longer than write but short
        max-lifetime: 900000        # 15 minutes - moderate lifetime
        keepalive-time: 60000       # 1 minute - frequent keepalive

        # Performance Tuning for Test Reads
        connection-timeout: 3000    # 3 seconds - very fast for reads
        validation-timeout: 1000    # 1 second - quick validation
        leak-detection-threshold: 30000 # 30 seconds - detect leaks quickly

  # OAuth2 Security Configuration
  # Integrates with Auth0 for JWT-based authentication
  security:
    oauth2:
      resourceserver:
        jwt:
          # Auth0 development tenant - trailing slash is required
          issuer-uri: https://testlogin.bdpsmart.com/

# Server Configuration
# Development server with compression enabled for faster local testing
server:
  port: 8080
  compression:
    enabled: true
    mime-types: text/html,text/css,application/javascript,application/json

# Auth0 Configuration
# Machine-to-Machine (M2M) credentials for service-to-service communication
# Client secret is retrieved from AWS Secrets Manager for security
auth0:
  domain: bdpint-smarthub-test.us.auth0.com
  clientId: jQIm5vnfFdbnxoNGQJSp0w7Vp9nY9IQH
  m2mClientSecret: lS2g-CCVgPvTc2RiGJ8cBxCJUXCHXDR1HURKLo1ustBP43YKTKFev-gRKynj-dGE

# AWS Configuration
# Handles credentials, secrets, and S3 bucket access for development
cloud:
  aws:
    region:
      static: us-east-1         # Fixed region for development consistency
      auto: false               # Disable auto-detection
    credentials:                # Uses default credential chain
    secret-name: 'test/bdp-smartnav-secret'  # Development secrets in AWS Secrets Manager
    s3:
      bucket-name: 'apps-dnd-bucket-test'     # Development S3 bucket

# External API Rate Limiting Configuration - Test Environment  
external-api:
  rate-limiting:
    enabled: true
    default-config:
      requests-per-hour: 500
      requests-per-minute: 50
      burst-capacity: 5

# API Documentation Configuration
# Swagger UI setup for interactive API testing and documentation
springdoc:
  api-docs:
    path: /api/docs/api-docs          # OpenAPI JSON endpoint
    enabled: true                               # Enable OpenAPI documentation
  swagger-ui:
    path: /api/docs/swagger-ui.html   # Swagger UI interface
    disable-swagger-default-url: true           # Use custom URL configuration
    url: /api/docs/api-docs           # Points to our OpenAPI JSON
    config-url: /api/docs/api-docs/swagger-config  # Swagger config endpoint
    enabled: true                               # Enable Swagger UI
  paths-to-match: /**                          # Include all paths in documentation
  packages-to-scan: com.itt.service  # Scan only our packages

# Swagger Server URLs - Test Environment
swagger:
  servers:
    urls:
      - "https://test-api.itt.com"        # TODO: Replace with actual test server URL
      - "https://test-portal.itt.com"     # TODO: Replace with actual test portal URL

